const selectors = {
    boardContainer: document.querySelector('.board-container'),
    board: document.querySelector('.board'),
    moves: document.querySelector('.moves'),
    timer: document.querySelector('.timer'),
    start: document.querySelector('button'),
    win: document.querySelector('.win')
};

const state = {
    gameStarted: false,
    flippedCards: 0,
    totalFlips: 0,
    totalTime: 0,
    loop: null
};

const shuffle = array => {
    const clonedArray = [...array];
    for (let i = clonedArray.length - 1; i > 0; i--) {
        const randomIndex = Math.floor(Math.random() * (i + 1));
        const original = clonedArray[i];
        clonedArray[i] = clonedArray[randomIndex];
        clonedArray[randomIndex] = original;
    }
    return clonedArray;
};

const pickRandom = (array, items) => {
    const clonedArray = [...array];
    const randomPicks = [];
    for (let i = 0; i < items; i++) {
        const randomIndex = Math.floor(Math.random() * clonedArray.length);
        randomPicks.push(clonedArray[randomIndex]);
        clonedArray.splice(randomIndex, 1);
    }
    return randomPicks;
};

const generateGame = () => {
    const dimensions = selectors.board.getAttribute('data-dimension');
    if (dimensions % 2 !== 0) {
        throw new Error("–†–∞–∑–º–µ—Ä –ø–æ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º.");
    }

    const emojis = ['ü•î', 'üçí', 'ü•ë', 'üåΩ', 'ü•ï', 'üçá', 'üçâ', 'üçå', 'ü•≠', 'üçç'];
    const picks = pickRandom(emojis, (dimensions * dimensions) / 2);
    const items = shuffle([...picks, ...picks]);

    const cards = `
        <div class="board" style="grid-template-columns: repeat(${dimensions}, auto)">
            ${items.map(item => `
                <div class="card" onclick="flipCard(this)">
                    <div class="card-front"></div>
                    <div class="card-back">
                        <span class="emoji">${item}</span>
                    </div>
                </div>
            `).join('')}
        </div>
    `;

    const parser = new DOMParser().parseFromString(cards, 'text/html');
    selectors.boardContainer.innerHTML = '';
    selectors.boardContainer.appendChild(parser.querySelector('.board'));
};

const startGame = () => {
    state.gameStarted = true;
    selectors.start.classList.add('disabled');
    state.loop = setInterval(() => {
        state.totalTime++;
        selectors.moves.innerText = `${state.totalFlips} moves`;
        selectors.timer.innerText = `Time: ${state.totalTime} sec`;
    }, 1000);
};

const resetGame = () => {
    state.flippedCards = 0;
    state.totalFlips = 0;
    state.totalTime = 0;

    clearInterval(state.loop);
    state.loop = null;
    selectors.start.classList.remove('disabled');

    selectors.win.innerHTML = '';
    selectors.moves.innerText = '0 moves';
    selectors.timer.innerText = 'Time: 0 sec';

    generateGame();
    state.gameStarted = false;
};

const flipBackCards = () => {
    document.querySelectorAll('.card:not(.matched)').forEach(card => {
        card.classList.remove('flipped');
    });
    state.flippedCards = 0;
};

const flipCard = card => {
    if (state.flippedCards >= 2) {
        return;
    }

    if (!state.gameStarted) {
        startGame();
    }

    state.flippedCards++;
    state.totalFlips++;

    card.classList.add('flipped');

    if (state.flippedCards === 2) {
        const flippedCards = document.querySelectorAll('.flipped:not(.matched)');
        if (flippedCards[0].innerText === flippedCards[1].innerText) {
            flippedCards[0].classList.add('matched');
            flippedCards[1].classList.add('matched');
            state.flippedCards = 0;
        } else {
            setTimeout(() => {
                flipBackCards();
                state.flippedCards = 0; // –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–∏
            }, 1000);
        } 

        if (!document.querySelectorAll('.card:not(.matched)').length) {
            setTimeout(() => {
                selectors.win.innerHTML = `
                    <span class="win-text">
                    
                        –í—ã –ø–æ–±–µ–¥–∏–ª–∏!<br />–∑–∞ <span class="highlight">${state.totalFlips}</span> —Ö–æ–¥–æ–≤<br />
–∑–∞ <span class="highlight">${state.totalTime}</span> —Å–µ–∫—É–Ω–¥
                    </span>
                `;
                setTimeout(() => {
                    resetGame(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞
                }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∏–≥—Ä—ã
            }, 1000);
        }
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
const preventTextSelectionAndCopy = () => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    document.addEventListener('selectstart', (e) => {
        e.preventDefault();
    });

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    document.addEventListener('copy', (e) => {
        e.preventDefault();
        alert('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ!');
    });
};

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
preventTextSelectionAndCopy();

selectors.start.addEventListener('click', () => {
    resetGame();
});

window.onload = () => {
    generateGame();
};

// CSS –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —ç–º–æ–¥–∂–∏ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ö
const style = document.createElement('style');
style.innerHTML = `
    .card {
        position: relative;
        width: 100px; /* –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏ */
        height: 100px; /* –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∫–∞—Ä—Ç–æ—á–∫–∏ */
        overflow: hidden;
    }
    .card-back {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        width: 100%;
    }
    .emoji {
        font-size: 2em; /* –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —ç–º–æ–¥–∂–∏ –º–µ–Ω—å—à–µ, —á–µ–º –∫–∞—Ä—Ç–æ—á–∫–∞ */
    }
`;
document.head.appendChild(style);
